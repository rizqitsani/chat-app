import * as React from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import { IoSend } from 'react-icons/io5';
import ChatBubble from '../components/ChatBubble';
import { useUser } from '../context/UserContext';
import styles from '../styles/Home.module.css';
import { io } from 'socket.io-client';

export type Message = {
  text: string;
  name: string;
  createdAt: string;
};

type JoinResponse = {
  clients: string[];
  messages: Message[];
};

const socket = io('http://localhost:5000');

const Home: NextPage = () => {
  const [nameInput, setNameInput] = React.useState('');
  const [messageInput, setMessageInput] = React.useState('');
  const [messages, setMessages] = React.useState<Message[]>([]);
  const [isJoined, setIsJoined] = React.useState(false);
  const endOfChatRef = React.useRef<HTMLDivElement | null>(null);

  const { state, dispatch } = useUser();

  React.useEffect(() => {
    socket.on('connect', () => {
      console.log('connected');
    });

    socket.on('message', (message: Message) => {
      setMessages((prevMessages) => [...prevMessages, message]);
    });

    return () => {
      socket.off('connect');
      socket.off('message');
    };
  }, []);

  // Scroll to bottom of chat when new message is received
  React.useEffect(() => {
    endOfChatRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleNameSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    dispatch({ type: 'populate', payload: nameInput });
    setNameInput('');

    socket.emit('join', { name: nameInput }, (response: JoinResponse) => {
      setIsJoined(true);
      setMessages(response.messages);
    });
  };

  const handleMessageSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (messageInput !== '') {
      socket.emit('createMessage', { text: messageInput }, () => {
        setMessageInput('');
      });
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <div className={styles.chat_box}>
          {isJoined &&
            messages?.map((message, index) => (
              <ChatBubble key={index} message={message} />
            ))}
          <div ref={endOfChatRef}></div>
        </div>
        <div className={styles.input_section}>
          <form onSubmit={handleMessageSubmit} autoComplete='off'>
            <div className={styles.input_container}>
              <input
                type='text'
                value={messageInput}
                onChange={(e) => setMessageInput(e.target.value)}
                placeholder='Type your message'
                className={styles.input_box}
              />
              <button className={styles.send_button}>
                <IoSend />
              </button>
            </div>
          </form>
        </div>

        {!isJoined && (
          <div className={styles.backdrop}>
            <div className={styles.modal_content}>
              <h1>HiðŸ‘‹</h1>
              <span>Please enter your username</span>
              <form onSubmit={handleNameSubmit}>
                <input
                  type='text'
                  name='username'
                  value={nameInput}
                  onChange={(e) => setNameInput(e.target.value)}
                  className={styles.input_username}
                />
                <button className={styles.button_primary}>Enter</button>
              </form>
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default Home;
