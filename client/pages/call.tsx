import * as React from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import Peer from 'simple-peer';
import styles from '../styles/Call.module.css';
import { useSocket } from '../context/SocketContext';
import { useUser } from '../context/UserContext';

const Call: NextPage = () => {
  const [myId, setMyId] = React.useState('');
  const [receiverId, setReceiverId] = React.useState('');
  const [isCallAccepted, setIsCallAccepted] = React.useState(false);
  const [isReceivingCall, setIsReceivingCall] = React.useState(false);
  const [caller, setCaller] = React.useState('');
  const [callerSignal, setCallerSignal] = React.useState('');
  const [stream, setStream] = React.useState<MediaStream>();

  const myVideoRef = React.useRef<HTMLVideoElement | null>(null);
  const userVideoRef = React.useRef<HTMLVideoElement | null>(null);
  const peerRef = React.useRef<Peer.Instance>();

  const socket = useSocket();
  const { state: user } = useUser();

  React.useEffect(() => {
    navigator.mediaDevices
      .getUserMedia({ video: true, audio: true })
      .then((stream) => {
        setStream(stream);
        if (myVideoRef.current) {
          myVideoRef.current.srcObject = stream;
        }
      });

    socket.on('connect', () => {
      console.log('connected');
    });

    socket.on('me', (id: string) => {
      setMyId(id);
    });

    socket.on('callUser', (data) => {
      setIsReceivingCall(true);
      setCaller(data.from);
      setCallerSignal(data.signal);
    });

    return () => {
      socket.off('connect');
      socket.off('me');
      socket.off('callUser');
    };
  }, [socket]);

  const callUser = () => {
    const peer = new Peer({
      initiator: true,
      trickle: false,
      stream,
    });

    peer.on('signal', (data) => {
      socket.emit('callUser', {
        signal: data,
        from: myId,
        to: receiverId,
        name: user.name,
      });
    });

    peer.on('stream', (stream) => {
      console.log({ type: 'call', stream });
      if (userVideoRef.current) {
        userVideoRef.current.srcObject = stream;
      }
    });

    socket.on('callAccepted', (signal) => {
      setIsCallAccepted(true);
      peer.signal(signal);
    });

    peerRef.current = peer;
  };

  const answerCall = () => {
    setIsCallAccepted(true);
    const peer = new Peer({
      initiator: false,
      trickle: false,
      stream,
    });

    peer.on('signal', (data) => {
      socket.emit('answerCall', { signal: data, to: caller });
    });

    peer.on('stream', (stream) => {
      console.log({ type: 'answer', stream });
      if (userVideoRef.current) {
        userVideoRef.current.srcObject = stream;
      }
    });

    peer.signal(callerSignal);
    peerRef.current = peer;
  };

  const leaveCall = () => {
    setIsCallAccepted(false);
    setIsReceivingCall(false);
    setCaller('');
    setCallerSignal('');
    peerRef.current?.destroy();
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1 style={{ textAlign: 'center' }}>Video Chat</h1>

        <div className={styles.video_container}>
          {stream ? (
            <div style={{ aspectRatio: '16/9', overflow: 'hidden' }}>
              <video ref={myVideoRef} playsInline muted autoPlay />
            </div>
          ) : (
            <div style={{ background: '#CBD5E0', width: '100%' }} />
          )}

          {isCallAccepted ? (
            <div style={{ aspectRatio: '16/9', overflow: 'hidden' }}>
              <video ref={userVideoRef} playsInline muted autoPlay />
            </div>
          ) : (
            <div style={{ background: '#CBD5E0', width: '100%' }} />
          )}
        </div>

        <div className={styles.control_container}>
          {isCallAccepted ? (
            <button onClick={leaveCall} className={styles.button_danger}>
              End Call
            </button>
          ) : (
            <>
              <input
                type='text'
                value={receiverId}
                onChange={(e) => setReceiverId(e.target.value)}
                placeholder='ID to call'
                className={styles.input_box}
              />
              <button onClick={callUser} className={styles.button_primary}>
                Call
              </button>
            </>
          )}
        </div>

        {isReceivingCall && !isCallAccepted && (
          <div
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: '1rem',
              margin: '0.5rem auto 0 auto',
            }}
          >
            <p>{caller} is calling you...</p>
            <button onClick={answerCall} className={styles.button_primary}>
              Answer
            </button>
          </div>
        )}

        <p style={{ textAlign: 'center', marginTop: '0.25rem' }}>
          Your ID: {myId}
        </p>
      </main>
    </div>
  );
};

export default Call;
